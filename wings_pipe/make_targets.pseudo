def register:
   pipeline = get pipeline()
   name = get this task's name
   pipeline.addtask(name)
   task.addmask(name,'start',*)

def discover_targets:
   pipeline = get pipeline()
   start_targ = pipeline.getStartTarg()
   start_conf = start_targ.getStartConf()
   datapath = pipeline.getrawpath()
   data = glob(datapath . '*.cat')
   Figure out RA and DEC and other attributes of data
   number = -1;
   for dat in data:
      Determine a target name
      if target_name not in target_names:
         target_names = append(target_names,target_name)
         number++
         sorted_data[number,0] = dat # add data to the stucture to be returned
      else:
         determine the index of target_name in target_names
	 sorted_data[target_index,next] = dat #add data to the correct place in structure 
      start_targ.addDataProduct(give it the information)
   divide into targets
   return target_names, sorted_data, start_conf #structure of sorted_data will be multi-dimensional

def create_target(target_name,data,configuation):
   new_target = pipeline.createTarget(target_name,configuration)
   thisjob.createOption(targetname . "_data_processed", 0)
   for dat in data:
        new_dat = dat.CopyTo(new_target,"raw")
	number = len(data) 
	event = create_event("new_data")
        event.addOption("data_name", new_dat.getName())
        event.addOption("total data", number)
        event.fire()
		
if option -R:
    register()
    exit(0)

else:
    config = pipeline
    targs,data,config = discover_targets()
    count = 0;
    for targ in targs:
        create_target(targ,data[count,:],config)
        count++
    
