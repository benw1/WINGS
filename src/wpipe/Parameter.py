#!/usr/bin/env python
"""
Contains the Parameter class definition

Please note that this module is private. The Parameter class is
available in the main ``wpipe`` namespace - use that instead.
"""
from .core import datetime, pd, si
from .core import make_yield_session_if_not_cached, initialize_args, wpipe_to_sqlintf_connection, in_session
from .core import split_path

__all__ = ['Parameter']

KEYID_ATTR = 'parameter_id'
UNIQ_ATTRS = ['config_id', 'name']
CLASS_LOW = split_path(__file__)[1].lower()


def _in_session(**local_kw):
    return in_session('_%s' % CLASS_LOW, **local_kw)


_check_in_cache = make_yield_session_if_not_cached(KEYID_ATTR, UNIQ_ATTRS, CLASS_LOW)


class Parameter:
    """
        Represents a configuration's parameter.

        Call signatures::

            Parameter(configuration, name, value)
            Parameter(keyid)
            Parameter(_parameter)

        When __new__ is called, it queries the database for an existing
        row in the `parameters` table via `sqlintf` using the given signature.
        If the row exists, it retrieves its corresponding `sqlintf.Parameter`
        object, otherwise it creates a new row via a new `sqlintf.Parameter`
        instance. This `sqlintf.Parameter` object is then wrapped under the
        hidden attribute `Parameter._parameter` in the new instance of this
        `Parameter` class generated by __new__.

        All parameters are uniquely identified by their configuration and
        their name, but alternatively, the constructor can take as sole
        argument either:
         - the primary key id of the corresponding `parameters` table row
         - the `sqlintf.Parameter` object interfacing that table row

        Parameters
        ----------
        configuration : Configuration object
            Parent Configuration owning this option.
        name : string
            Name of the parameter.
        value : string
            Value of the parameter.
        keyid : int
            Primary key id of the table row.
        _parameter : sqlintf.Parameter object exposing SQL interface
            Corresponding sqlintf object interfacing the table row.

        Attributes
        ----------
        parents : Configuration object
            Points to attribute self.config.
        name : string
            Name of the parameter.
        parameter_id : int
            Primary key id of the table row.
        timestamp : datetime.datetime object
            Timestamp of last access to table row.
        value : string
            Value of the parameter.
        config : Configuration object
            Configuration object corresponding to parent configuration.
        config_id : int
            Primary key id of the table row of parent configuration.
    """
    __cache__ = pd.DataFrame(columns=[KEYID_ATTR]+UNIQ_ATTRS+[CLASS_LOW])

    @classmethod
    def _check_in_cache(cls, kind, loc):
        return _check_in_cache(cls, kind, loc)

    @classmethod
    def _sqlintf_instance_argument(cls):
        if hasattr(cls, '_%s' % CLASS_LOW):
            for _session in cls._check_in_cache(kind='keyid',
                                                loc=getattr(cls, '_%s' % CLASS_LOW)._sa_instance_state.key[1][0]):
                pass

    def __new__(cls, *args, **kwargs):
        if hasattr(cls, '_inst'):
            old_cls_inst = cls._inst
            delattr(cls, '_inst')
        else:
            old_cls_inst = None
        cls._to_cache = {}
        # checking if given argument is sqlintf object or existing id
        cls._parameter = args[0] if len(args) else None
        if not isinstance(cls._parameter, si.Parameter):
            keyid = kwargs.get('id', cls._parameter)
            if isinstance(keyid, int):
                for session in cls._check_in_cache(kind='keyid', loc=keyid):
                    cls._parameter = session.query(si.Parameter).filter_by(id=keyid).one()
            else:
                # gathering construction arguments
                wpargs, args, kwargs = initialize_args(args, kwargs, nargs=2)
                config = kwargs.get('config', wpargs.get('Configuration', None))
                name = kwargs.get('name', args[0])
                value = kwargs.get('value', args[1])
                # querying the database for existing row or create
                for session in cls._check_in_cache(kind='args', loc=(config.config_id, name)):
                    for retry in session.retrying_nested():
                        with retry:
                            this_nested = retry.retry_state.begin_nested()
                            cls._parameter = this_nested.session.query(si.Parameter).with_for_update(). \
                                filter_by(config_id=config.config_id). \
                                filter_by(name=name).one_or_none()
                            if cls._parameter is None:
                                cls._parameter = si.Parameter(name=name,
                                                              value=str(value))
                                config._configuration.parameters.append(cls._parameter)
                                this_nested.commit()
                            else:
                                this_nested.rollback()
                            retry.retry_state.commit()
        else:
            with si.begin_session() as session:
                session.add(cls._parameter)
                for _session in cls._check_in_cache(kind='keyid', loc=cls._parameter.id):
                    pass
        # verifying if instance already exists and return
        wpipe_to_sqlintf_connection(cls, 'Parameter')
        # add instance to cache dataframe
        if cls._to_cache:
            cls._to_cache[CLASS_LOW] = cls._inst
            cls.__cache__.loc[len(cls.__cache__)] = cls._to_cache
        new_cls_inst = cls._inst
        delattr(cls, '_inst')
        if old_cls_inst is not None:
            cls._inst = old_cls_inst
        return new_cls_inst

    @_in_session()
    def __init__(self, *args, **kwargs):
        self._parameter.timestamp = datetime.datetime.utcnow()
        self._session.commit()

    @classmethod
    def select(cls, **kwargs):
        """
        Returns a list of Parameter objects fulfilling the kwargs filter.

        Parameters
        ----------
        kwargs
            Refer to :class:`sqlintf.Parameter` for parameters.

        Returns
        -------
        out : list of Parameter object
            list of objects fulfilling the kwargs filter.
        """
        with si.begin_session() as session:
            cls._temp = session.query(si.Parameter).filter_by(**kwargs)
            return list(map(cls, cls._temp.all()))

    @property
    def parents(self):
        """
        :obj:`Configuration`: Points to attribute self.config.
        """
        return self.config

    @property
    @_in_session()
    def name(self):
        """
        str: Name of the parameter.
        """
        return self._parameter.name

    @name.setter
    @_in_session()
    def name(self, name):
        self._parameter.name = name
        self._parameter.timestamp = datetime.datetime.utcnow()
        self._session.commit()

    @property
    @_in_session()
    def parameter_id(self):
        """
        int: Primary key id of the table row.
        """
        return self._parameter.id

    @property
    @_in_session()
    def timestamp(self):
        """
        :obj:`datetime.datetime`: Timestamp of last access to table row.
        """
        self._session.refresh(self._parameter)
        return self._parameter.timestamp

    @property
    @_in_session()
    def value(self):
        """
        str: Value of the parameter.
        """
        self._session.refresh(self._parameter)
        return self._parameter.value

    @value.setter
    @_in_session()
    def value(self, value):
        self._parameter.value = value
        self._parameter.timestamp = datetime.datetime.utcnow()
        self._session.commit()

    @property
    @_in_session()
    def config(self):
        """
        :obj:`Configuration`: Configuration object corresponding to parent
        configuration.
        """
        if hasattr(self._parameter.config, '_wpipe_object'):
            return self._parameter.config._wpipe_object
        else:
            from .Configuration import Configuration
            return Configuration(self._parameter.config)

    @property
    @_in_session()
    def config_id(self):
        """
        int: Primary key id of the table row of parent configuration.
        """
        return self._parameter.config_id

    def delete(self):
        """
        Delete corresponding row from the database.
        """
        si.delete(self._parameter)
