#!/usr/bin/env python
"""
Contains the Node class definition

Please note that this module is private. The Node class is
available in the main ``wpipe`` namespace - use that instead.
"""
from .core import datetime, si
from .core import ChildrenProxy
from .core import initialize_args, wpipe_to_sqlintf_connection
import socket

__all__ = ['Node']


class Node:
    """
        Represents a node of the local machine.

        Call signatures::

            Node(name=socket.gethostname(), int_ip='', ext_ip='')
            Node(keyid)
            Node(_node)

        When __new__ is called, it queries the database for an existing
        row in the `nodes` table via `sqlintf` using the given signature.
        If the row exists, it retrieves its corresponding `sqlintf.Node`
        object, otherwise it creates a new row via a new `sqlintf.Node`
        instance. This `sqlintf.Node` object is then wrapped under the
        hidden attribute `Node._node` in the new instance of this `Node`
        class generated by __new__.

        All nodes are uniquely identified by their name, but alternatively,
        the constructor can take as sole argument either:
         - the primary key id of the corresponding `nodes` table row
         - the `sqlintf.Node` object interfacing that table row

        Parameters
        ----------
        name : string
            Name of node - defaults to socket.gethostname() (see Notes).
        int_ip : string
            Internal IP address of node - defaults to ''.
        ext_ip : string
            External IP address of node - defaults to ''.
        keyid : int
            Primary key id of the table row.
        _node : sqlintf.Node object exposing SQL interface
            Corresponding sqlintf object interfacing the table row.

        Attributes
        ----------
        parents : None
            Dummy attribute with None value.
        name : string
            Name of node.
        node_id : int
            Primary key id of the table row.
        timestamp : datetime.datetime object
            Timestamp of last access to table row.
        int_ip : string
            Internal IP address of node.
        ext_ip : string
            External IP address of node.
        jobs : core.ChildrenProxy object
            List of Job objects owned by node.

        See Also
        --------
        DefaultNode : Node constructed at wpipe importation.

        Notes
        -----
        Importing wpipe constructs a default node stored in DefaultNode. This
        makes use of the socket.gethostname method that returns the current
        host name.
    """
    def __new__(cls, *args, **kwargs):
        # checking if given argument is sqlintf object or existing id
        cls._node = args[0] if len(args) else None
        if not isinstance(cls._node, si.Node):
            keyid = kwargs.get('id', cls._node)
            if isinstance(keyid, int):
                cls._node = si.session.query(si.Node).filter_by(id=keyid).one()
            else:
                # gathering construction arguments
                wpargs, args, kwargs = initialize_args(args, kwargs, nargs=3)
                name = kwargs.get('name', socket.gethostname() if args[0] is None else args[0])
                int_ip = kwargs.get('int_ip', '' if args[1] is None else args[1])
                ext_ip = kwargs.get('ext_ip', '' if args[2] is None else args[2])
                # querying the database for existing row or create
                try:
                    cls._node = si.session.query(si.Node). \
                        filter_by(name=name).with_for_update().one()
                except si.orm.exc.NoResultFound:
                    cls._node = si.Node(name=name,
                                        int_ip=int_ip,
                                        ext_ip=ext_ip)
                    si.session.add(cls._node)
        # verifying if instance already exists and return
        wpipe_to_sqlintf_connection(cls, 'Node')
        return cls._inst

    def __init__(self, *args, **kwargs):
        if not hasattr(self, '_jobs_proxy'):
            self._jobs_proxy = ChildrenProxy(self._node, 'jobs', 'Job',
                                             child_attr='id')
        self._node.timestamp = datetime.datetime.utcnow()
        si.commit()

    @classmethod
    def select(cls, **kwargs):
        """
        Returns a list of Node objects fulfilling the kwargs filter.

        Parameters
        ----------
        kwargs
            Refer to :class:`sqlintf.Node` for parameters.

        Returns
        -------
        out : list of Node object
            list of objects fulfilling the kwargs filter.
        """
        cls._temp = si.session.query(si.Node).filter_by(**kwargs)
        return list(map(cls, cls._temp.all()))

    @property
    def parents(self):
        """
        None: Dummy attribute with None value.
        """
        return

    @property
    def name(self):
        """
        str: Name of node.
        """
        si.commit()
        return self._node.name

    @name.setter
    def name(self, name):
        self._node.name = name
        self._node.timestamp = datetime.datetime.utcnow()
        si.commit()

    @property
    def node_id(self):
        """
        int: Primary key id of the table row.
        """
        return self._node.id

    @property
    def timestamp(self):
        """
        :obj:`datetime.datetime`: Timestamp of last access to table row.
        """
        si.commit()
        return self._node.timestamp

    @property
    def int_ip(self):
        """
        str: Internal IP address of node.
        """
        return self._node.int_ip

    @property
    def ext_ip(self):
        """
        str: External IP address of node.
        """
        return self._node.ext_ip

    @property
    def jobs(self):
        """
        :obj:`core.ChildrenProxy`: List of Job objects owned by node.
        """
        return self._jobs_proxy

    def job(self, *args, **kwargs):
        """
        Returns a job owned by the node.

        Parameters
        ----------
        kwargs
            Refer to :class:`Job` for parameters.

        Returns
        -------
        job : :obj:`Job`
            Job corresponding to given kwargs.
        """
        from .Job import Job
        return Job(self, *args, **kwargs)

    def delete(self):
        """
        Delete corresponding row from the database.
        """
        si.session.delete(self._node)
        si.commit()
